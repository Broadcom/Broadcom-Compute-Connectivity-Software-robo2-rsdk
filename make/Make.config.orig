#
# $Copyright: (c) 2017 Broadcom Corp.
# All Rights Reserved$
#
# Makefile configurations
#

#
# Configs
#

# Include application make config
include $(TOPDIR)/make/Make.appl

export NOPIC=1

# Configure compile flags based on the app chosen
ifeq ($(CONFIG_LOADER),1)
  $(info **** Building CONFIG_LOADER ****)
  export CPPFLAGS += -DCONFIG_BOOTLOADER
  export CFLAGS += -DCONFIG_BOOTLOADER -DINCLUDE_CLI
  export CONFIG_LOADER
else ifeq ($(CONFIG_CLI),1)
    ifeq ($(OS),linux)
        $(error "**** CONFIG_CLI is not supported in Linux ****")
    endif
    export CFLAGS += -DINCLUDE_CLI -DCFG_SWITCH_DIAGTEST_INCLUDED -DCOUNTER_DEBUG
    $(info **** Building CONFIG_CLI ****)
else ifeq ($(CONFIG_DIAG),1)
    ifeq ($(OS),linux)
        $(error "**** CONFIG_DIAG is not supported in Linux ****")
    endif
    export CFLAGS += -DINCLUDE_DIAG
    $(info **** Building CONFIG_DIAG ****)
else ifeq ($(CONFIG_TEST),1)
    export CFLAGS += -DINCLUDE_TEST
    $(info **** Building CONFIG_TEST ****)
else ifeq ($(CONFIG_CINT),1)
    export CFLAGS += -fno-short-enums -DINCLUDE_CINT -DCOUNTER_DEBUG
    $(info **** Building CONFIG_CINT ****)
endif
ifeq ($(CONFIG_WEB_SERVER),1)
    export NOPIC=0
    export CFLAGS += -DINCLUDE_WEB_SERVER -DCOUNTER_DEBUG -DINCLUDE_CLI
    $(info **** Building CONFIG_WEB_SERVER ****)
endif
ifeq ($(CONFIG_AVS),1)
    export CFLAGS += -DINCLUDE_AVS
endif

ifeq ($(CONFIG_M7_TCAM_TEST),1)
    export CFLAGS += -DINCLUDE_M7_TCAM_TEST
endif
ifeq ($(CONFIG_QSGMII_PHY),1)
    export CFLAGS += -DCONFIG_QSGMII
endif
ifeq ($(CONFIG_SGMII_PHY),1)
    export CFLAGS += -DCONFIG_SGMII
endif
ifeq ($(CONFIG_SGMII_SPEED),1000)
    export CFLAGS += -DCONFIG_SGMII_SPEED=1000
else ifeq ($(CONFIG_SGMII_SPEED),2500)
    export CFLAGS += -DCONFIG_SGMII_SPEED=2500
else
    export CFLAGS += -DCONFIG_SGMII_SPEED=2500
endif
ifeq ($(CONFIG_1000X_SPEED),1)
    export CFLAGS += -DCONFIG_1000X_1000
endif
ifeq ($(CONFIG_XFI_SPEED),1000)
    export CFLAGS += -DCONFIG_XFI_SPEED=1000
else ifeq ($(CONFIG_XFI_SPEED),2500)
    export CFLAGS += -DCONFIG_XFI_SPEED=2500
else 
    export CFLAGS += -DCONFIG_XFI_SPEED=10312
endif
ifeq ($(CONFIG_8488X_SUPPORT),1)
    export CFLAGS += -DCONFIG_8488X
endif
ifeq ($(CONFIG_PE),1)
    export CFLAGS += -DCONFIG_PORT_EXTENDER
endif
ifeq ($(CONFIG_10G_INTF_TYPE),1)
    export CFLAGS += -DCONFIG_10G_INTF_XFI
endif
ifeq ($(CONFIG_10G_INTF_TYPE),2)
    export CFLAGS += -DCONFIG_10G_INTF_SGMII
endif
ifeq ($(CONFIG_10G_INTF_TYPE),3)
    export CFLAGS += -DCONFIG_10G_INTF_KR
endif
ifeq ($(CONFIG_10G_INTF_TYPE),4)
    export CFLAGS += -DCONFIG_10G_INTF_KX
endif
ifneq ($(CONFIG_BCM_TAG),0)
    export CFLAGS += -DCONFIG_BCM_TAG
endif
ifeq ($(CONFIG_UART_CPU_INTF),1)
    export CFLAGS += -DCONFIG_USE_UART_AS_CPU_INTF
endif
ifeq ($(CONFIG_CASCADED),1)
    $(info **** Building with CASCADE Configuration ****)
    export CFLAGS += -DCONFIG_CASCADED_MODE
    ifneq ($(CONFIG_CPM_BITMAP),)
        export CFLAGS += -DCONFIG_CPM_BITMAP=$(CONFIG_CPM_BITMAP)
        export CFLAGS += -DCONFIG_CASCADE_MASTER_BITMAP
    else ifneq ($(OS),linux)
        $(warning CONFIG_CPM_BITMAP: No explicit cascade port on Master)
    endif
    ifneq ($(CONFIG_CPS_BITMAP),)
        export CFLAGS += -DCONFIG_CPS_BITMAP=$(CONFIG_CPS_BITMAP)
    else ifneq ($(OS),linux)
        $(warning CONFIG_CPS_BITMAP: No explicit cascade port on Slave)
    endif
    ifneq ($(CONFIG_TRAP_DEST),)
        export CFLAGS += -DCONFIG_CASCADE_TRAP_DEST=$(CONFIG_TRAP_DEST)
    else ifneq ($(OS),linux)
        $(warning CONFIG_TRAP_DEST: No explicit trap dest for slave, assuming 13)
    endif
endif
ifeq ($(CONFIG_DSCP_REMARK),1)
    export CFLAGS += -DDSCP_REMARK
endif
ifeq ($(CONFIG_A0_CHIP),1)
    export CFLAGS += -DCHIP_IS_A0
endif

ifeq ($(CONFIG_BE_HOST),1)
    export CFLAGS += -DCONFIG_BE_MODE
endif

# Set for adding one port to more than one VLAN with untag attribute and 
# provide API to set pvid of this port to certain one
ifeq ($(CONFIG_VLAN_PVID),1)
    export CFLAGS += -DCONFIG_VLAN_PVID
endif
#
# Mandatory CFLAGS
#
export CFLAGS += -Wall -Werror -DBCM_ROBO2_SUPPORT -ffreestanding -fgnu89-inline
export CFLAGS += -DSOC_NO_RESET_VALS -DSOC_NO_ALIAS
ifeq ($(NOPIC),0)
    export CFLAGS += -fpic -mno-pic-data-is-text-relative -msingle-pic-base -DWITH_PIC
endif
ifeq ($(DEBUG),)
    CFLAGS += -DSOC_NO_NAMES -DSOC_NO_RESET_VALS -DSOC_NO_DESC -DSOC_NO_ALIAS
endif

# Set OS pre-processor define
export CFLAGS += -DOS=$(OS)

# Linux specific Cflags for this build
ifeq ($(OS),linux)
    export CFLAGS += -DCONFIG_EXTERNAL_HOST
    ifeq ($(CONFIG_VP),1)
        export CFLAGS += -DCONFIG_VIRTUAL_PORT_SUPPORT
        export CFLAGS += -DCBX_MANAGED_MODE
    endif
    ifneq ($(CONFIG_ECPU_PORT),)
        export CFLAGS +=-DCBX_PORT_ECPU=$(CONFIG_ECPU_PORT)
    endif
endif

# OpenRTOS specific Cflags for this build
ifeq ($(OS),openrtos)
    export CFLAGS += -I$(TOPDIR)/systems/openrtos/kernel_source/include
    export CFLAGS += -I$(TOPDIR)/systems/openrtos/kernel_source/portable/ARM_CM7
    export CFLAGS += -DOPENRTOS
    export IMAGE_OFFSET ?= 0x10000
endif


#
# Path settings
#
ifeq ($(TOPDIR),)
$(error "Please set TOPDIR in the makefile"
endif
ifeq ($(CWD),)
$(error "Please set Current Working Dir (CWD) in the makefile")
endif

export OUTPUTDIR ?= $(TOPDIR)/build/$(TARGET_IMG)
export LIBDIR ?= $(OUTPUTDIR)/libs
export BLDOUT ?= $(subst $(TOPDIR),$(OUTPUTDIR),$(CWD))

#
# Verbosity
#   Invoke make with V=1
#
ifeq ($(V),)
export Q=@
else
export Q=
endif

# Set build tools
export MAKE ?= make
export RM ?= rm -f
export CP ?= cp

include $(TOPDIR)/make/Make.compiler

features=$(filter CONFIG_%, $(.VARIABLES))
$(foreach v, $(features), $(if $(filter 1, $($(v))), $(info $(v) = $($(v))),))
