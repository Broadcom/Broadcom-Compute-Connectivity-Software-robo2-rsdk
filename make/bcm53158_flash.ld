/*
 * $Id: $
 * $Copyright: (c) 2017 Broadcom Corp.
 * All Rights Reserved$
 *
 * File:
 *     bcm53158_flash.ld
 * Description:
 *     This is the linker script for bcm53158 flash layout
 */

INCLUDE bcm53158.ld

SECTIONS
{
    .vectors :
     {
         . = ALIGN(4);
         __vectors_start = .;
         KEEP(*(vtable))
         __vectors_end = .;
     } > flash

    .text : 
     {
         . = ALIGN(4);
         _stext = .;
         PROVIDE(stext = .);
         *(.text .text*)
         KEEP(*(rdb.*))
         KEEP(*(drivers))
     } > flash
    .rodata :
     {
         *(.rodata  .rodata*)
         KEEP(*(tsceucode))
         KEEP(*(8488xucode))
         *phy_allsyms.o(.data .data.*);
     } > flash

    .ARM.extab :
     {
         *(.ARM.extab* .gnu.linkonce.armextab.*)
     } > flash

     __exidx_start = .;
    .ARM.exidx   :
     {
         *(.ARM.exidx* .gnu.linkonce.armexidx.*) 
     } > flash

     _etext = .;
     PROVIDE(etext = .);
    .fastcode : AT(_etext)
     {
         __fastcode_load__ = LOADADDR(.fastcode);
         __fastcode_start__ = .;
         . = ALIGN(4); 
         *(text.fastcode)
         __fastcode_end__ = .;
     } > itcm

    .data : AT( _etext + SIZEOF(.fastcode))
     {
         __data_start__ = .;
         . = ALIGN(4); 
         *(.data .data.*)
         __data_end__ = .;
     } > ram
     PROVIDE(edata = .);
    
     _edata = .;
     __data_load__ = LOADADDR(.data);

    .dtcmdata : AT( __data_load__ + SIZEOF(.data))
     {
         __fastdata_start__ = .;
         . = ALIGN(4);
         *(.dtcmdata .dtcmdata.*)
         __fastdata_end__ = .;
     } > dtcm
     __fastdata_load__ = LOADADDR(.dtcmdata);

    .bss (NOLOAD): 
     {
         . = ALIGN(4); 
         __bss_start__ = .;
         *(.bss .bss.*) 
         *(COMMON)
         __bss_end__ = .;
     } > ram
     PROVIDE(end = .);
     _end = .;

    /* heap */
    .heap (NOLOAD):
    {
        . = ALIGN(8);
         __heap_start__ = .;
        . = ORIGIN(ram) + LENGTH(ram) - 8;
        . = ALIGN(8);
        __heap_end__ = .;
        PROVIDE(__HEAP_START = __heap_start__);
        PROVIDE(__HEAP_END = __heap_end__);
    } > ram
    
    __stack_start__ = ORIGIN(dtcm) + LENGTH(dtcm) - 8;
    __stack_end__ =   __stack_start__  - STACK_SIZE;

    ASSERT(SIZEOF(.data) + SIZEOF(.bss) + SIZEOF(.heap)  <= LENGTH(ram), "**** SRAM OVERFLOW DETECTED ****")
    ASSERT(SIZEOF(.fastcode)  <= LENGTH(itcm), "**** ITCM OVERFLOW DETECTED ****")
}

