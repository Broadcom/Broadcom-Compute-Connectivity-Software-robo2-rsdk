#
# $Id: wrappergen.pl,v 1.9 2012/03/02 16:21:40 yaronm Exp $
# $Copyright: (c) 2017 Broadcom Corp.
# All Rights Reserved.$
#
# File:        wrappergen.pl
# Purpose:     CINT C wrapper generator
#




sub plist
  {
    my $i = shift; 
    my @pre = @_; 
    my @params = map { "$_$i" } @pre; 
    return join ",", @params; 
  }

sub pplist
  {
    my $num = shift; 
    my @pre = @_; 

    my $string; 

    for(my $x = 0; $x < $num; $x++) {
      $string = $string . "," . plist($x, @pre); 
    }
    return $string; 
  }

sub ctrim
  {
    my $string = shift;
    $string =~ s/^,//; 
    return $string; 
  }

sub macro
  {
    my $define = shift; 
    my $name = shift; 
    my $returns = shift; 
    my $fname = shift; 
    my $pcount = shift; 
    my @pre = @_; 

    printf "%s${name}_%sP%d(%s%s%s)  %s", 
      $define ? "#define " : "", 
      defined($returns) ? "R" : "V", 
        $pcount, 
          $returns, $fname, pplist($pcount, @pre), $define ? "\\\n" : ""; 
  }


sub fwrapper_function
  {    
    my ($returns, $count) = @_; 
    my $rs; 
    
    if($returns) {
      $rs = "rt,"; 
    }
    macro(1, "CINT_FWRAPPER_FUNCTION", $rs, "fname", $count, qw(pt p)); 
    print "static int __cint_fwrapper__##fname (cint_fparams_t* fparams) \\\n"; 
    print "{ \\\n"; 
    if($count) {
      printf "  CINT_FARGS%d(%s);  \\\n", 
        $count, ctrim(pplist($count, qw(pt p))); 
    }
    print "\\\n"; 
    if($returns) {
      print "  CINT_FRET(rt) = "; 
    }
    else {
      print "  "; 
    }
    my $list = ctrim(pplist($count, qw(p))); 
    printf "fname (%s); \\\n", $list; 
    print "\\\n"; 
    if($count) {
      print "  CINT_FWRAPPER_END;\\\n"; 
    }
    print "  return 0; \\\n"; 
    print "}\n\n"; 
  }

sub f_params
  {
    my ($name, $returns, $count) = @_; 
    my $rs; 
    if($returns) {
      $rs = "rb,rp,ra,"; 
    }
    macro(1, "CINT_${name}_PARAMS", $rs, "fname", $count, qw(pb p pp pa)); 
    print "static cint_parameter_desc_t __cint_parameters__##fname [] = \\\n"; 
    print "{ \\\n"; 
    if($returns) {
      print "  { #rb, \"r\", rp, ra }, \\\n"; 
    }
    else {
      print "  { \"void\", \"r\", 0, 0 }, \\\n"; 
    }
    for(my $i = 0; $i < $count; $i++) {
      my $list = ctrim(plist($i, qw(#pb #p pp pa))); 
      print "  { $list }, \\\n"; 
    }
    print "  CINT_ENTRY_LAST \\\n"; 
    print "}\n\n"; 
  }
                 
sub f_params2
  {
    my ($name, $returns, $count) = @_; 
    my $rs; 
    if($returns) {
      $rs = "rb,rp,ra,"; 
    }
    macro(1, "CINT_${name}_PARAMS2", $rs, "fname", $count, qw(pb p pp pa pf)); 
    print "static cint_parameter_desc_t __cint_parameters__##fname [] = \\\n"; 
    print "{ \\\n"; 
    if($returns) {
      print "  { #rb, \"r\", rp, ra }, \\\n"; 
    }
    else {
      print "  { \"void\", \"r\", 0, 0 }, \\\n"; 
    }
    for(my $i = 0; $i < $count; $i++) {
      my $list = ctrim(plist($i, qw(#pb #p pp pa pf))); 
      print "  { $list }, \\\n"; 
    }
    print "  CINT_ENTRY_LAST \\\n"; 
    print "}\n\n"; 
  }
                 
sub fwrapper_create
{
  my ($returns, $count) = @_; 
  my $rs; 
  if($returns) {
    $rs = "rt,rb,rp,ra,"; 
  }
  macro(1, "CINT_FWRAPPER_CREATE", $rs, "fname", $count, qw(pt pb p pp pa)); 
  macro(0, "CINT_FWRAPPER_FUNCTION", $returns ? "rt," : undef, "fname", $count, qw(pt p)); 
  printf(" \\\n"); 
  macro(0, "CINT_FWRAPPER_PARAMS", $returns ? "rb,rp,ra," : undef, "fname", $count, qw(pb p pp pa)); 
  printf("\n\n");
}

sub fwrapper_create2
{
  my ($returns, $count) = @_; 
  my $rs; 
  if($returns) {
    $rs = "rt,rb,rp,ra,"; 
  }
  macro(1, "CINT_FWRAPPER_CREATE2", $rs, "fname", $count, qw(pt pb p pp pa pf)); 
  macro(0, "CINT_FWRAPPER_FUNCTION", $returns ? "rt," : undef, "fname", $count, qw(pt p)); 
  printf(" \\\n"); 
  macro(0, "CINT_FWRAPPER_PARAMS2", $returns ? "rb,rp,ra," : undef, "fname", $count, qw(pb p pp pa pf)); 
  printf("\n\n");
}

sub farg_macro
  {
    my $count = shift; 

    printf("#define CINT_FARGS%d(%s) \\\n", $count, ctrim(pplist($count, qw(pt p)))); 
    
    my $i; 

    for($i = 0; $i < $count; $i++) {      
      printf "    pt$i p$i; \\\n"; 
    }
    for($i = 0; $i < $count; $i++) {
      printf("    CINT_MEMCPY(\&p$i, fparams->args[$i], sizeof(p$i)); \\\n"); 
    }
    printf "\n\n"; 
  }

# split up dollar-id-dollar to avoid keyword substitution
print "/*\n * \$";
print "Id: \$\n";
my $sec, $min, $hr, $md, $mo, $year, $wday, $yday, $dst;
($sec, $min, $hr, $md, $mo, $year, $wday, $yday, $dst) = localtime(time);
$year += 1900;

my $dollar = "\$";
print <<EOF
 * ${dollar}Copyright: (c) $year Broadcom Corp.
 * All Rights Reserved.${dollar}
 *
 * File:        cint_wrappers.h
 * Purpose:     CINT wrapper interfaces
 *
 * DO NOT EDIT THIS FILE!
 * This file is auto-generated by wrappergen.pl.
 * Edits to this file will be lost when it is regenerated.
 *
 */

#ifndef __CINT_WRAPPERS_H__ 
#define __CINT_WRAPPERS_H__

EOF
;

my $pcount = 12; 

for(my $p = 0; $p < $pcount; $p++) {
  farg_macro($p); 
}

for(my $returns = 0; $returns < 2; $returns++) {
  for(my $p = 0; $p < $pcount; $p++) {
    fwrapper_function($returns, $p); 
    f_params("FWRAPPER", $returns, $p); 
    fwrapper_create($returns, $p); 
    f_params2("FWRAPPER", $returns, $p); 
    fwrapper_create2($returns, $p); 
  }
}

print "#endif /* __CINT_WRAPPERS_H__ */\n\n"; 
