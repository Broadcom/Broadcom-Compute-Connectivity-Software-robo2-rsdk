/* 
 * $Id: cint_op_entry.h,v 1.3 2012/03/02 16:21:39 yaronm Exp $
 * $Copyright: (c) 2017 Broadcom Corp.
 * All Rights Reserved.$
 *
 * File:        cint_op_entry.h
 * Purpose:     CINT operator entries
 */

#ifndef CINT_OPERATOR_LIST_ENTRY
#error CINT_OPERATOR_LIST_ENTRY needs definition
#endif

    CINT_OPERATOR_LIST_ENTRY(">>", RightShift,              CINT_OPERATOR_FLAGS_IBINARY)
    CINT_OPERATOR_LIST_ENTRY("<<", LeftShift,               CINT_OPERATOR_FLAGS_IBINARY)
    CINT_OPERATOR_LIST_ENTRY("++", Increment,               CINT_OPERATOR_FLAGS_PBINARY | CINT_OPERATOR_F_OPTIONAL)
    CINT_OPERATOR_LIST_ENTRY("--", Decrement,               CINT_OPERATOR_FLAGS_PBINARY | CINT_OPERATOR_F_OPTIONAL)
    CINT_OPERATOR_LIST_ENTRY("&&", LogicalAnd,              CINT_OPERATOR_F_ACCEPT_ALL) 
    CINT_OPERATOR_LIST_ENTRY("||", LogicalOr,               CINT_OPERATOR_F_ACCEPT_ALL)
    CINT_OPERATOR_LIST_ENTRY("<=", LessThanOrEqual,         CINT_OPERATOR_FLAGS_PBINARY | CINT_OPERATOR_F_LOGICAL)
    CINT_OPERATOR_LIST_ENTRY(">=", GreaterThanOrEqual,      CINT_OPERATOR_FLAGS_PBINARY | CINT_OPERATOR_F_LOGICAL)
    CINT_OPERATOR_LIST_ENTRY("==", Equal,                   CINT_OPERATOR_FLAGS_PBINARY | CINT_OPERATOR_F_LOGICAL)
    CINT_OPERATOR_LIST_ENTRY("!=", NotEqual,                CINT_OPERATOR_FLAGS_PBINARY | CINT_OPERATOR_F_LOGICAL)
    CINT_OPERATOR_LIST_ENTRY("{",  OpenBrace,0)
    CINT_OPERATOR_LIST_ENTRY("}",  CloseBrace,0)
    CINT_OPERATOR_LIST_ENTRY("=",  Assign,                  CINT_OPERATOR_FLAGS_BINARY | CINT_OPERATOR_F_ACCEPT_ALL)
    CINT_OPERATOR_LIST_ENTRY("[",  OpenBracket,             CINT_OPERATOR_FLAGS_BINARY | CINT_OPERATOR_F_ACCEPT_INTEGRAL | CINT_OPERATOR_F_ACCEPT_POINTER)
    CINT_OPERATOR_LIST_ENTRY("&",  BitwiseAnd,              CINT_OPERATOR_FLAGS_IBINARY)
    CINT_OPERATOR_LIST_ENTRY("!",  Not,                     CINT_OPERATOR_FLAGS_PUNARY | CINT_OPERATOR_F_LOGICAL)
    CINT_OPERATOR_LIST_ENTRY("~",  Tilde,                   CINT_OPERATOR_FLAGS_IUNARY)
    CINT_OPERATOR_LIST_ENTRY("-",  Subtract,                CINT_OPERATOR_FLAGS_PBINARY)
    CINT_OPERATOR_LIST_ENTRY("+",  Add,                     CINT_OPERATOR_FLAGS_PBINARY)
    CINT_OPERATOR_LIST_ENTRY("*",  Multiply,                CINT_OPERATOR_FLAGS_ABINARY)
    CINT_OPERATOR_LIST_ENTRY("/",  Divide,                  CINT_OPERATOR_FLAGS_ABINARY)
    CINT_OPERATOR_LIST_ENTRY("%",  Mod,                     CINT_OPERATOR_FLAGS_IBINARY)
    CINT_OPERATOR_LIST_ENTRY("<",  LessThan,                CINT_OPERATOR_FLAGS_PBINARY | CINT_OPERATOR_F_LOGICAL)
    CINT_OPERATOR_LIST_ENTRY(">",  GreaterThan,             CINT_OPERATOR_FLAGS_PBINARY | CINT_OPERATOR_F_LOGICAL)
    CINT_OPERATOR_LIST_ENTRY("^",  BitwiseXor,              CINT_OPERATOR_FLAGS_IBINARY)
    CINT_OPERATOR_LIST_ENTRY("|",  BitwiseOr,               CINT_OPERATOR_FLAGS_IBINARY)
    CINT_OPERATOR_LIST_ENTRY("?",  Question,                CINT_OPERATOR_F_LEFT | CINT_OPERATOR_F_ACCEPT_ALL)
    CINT_OPERATOR_LIST_ENTRY("&",  AddressOf,               CINT_OPERATOR_FLAGS_UNARY | CINT_OPERATOR_F_ACCEPT_ALL)
    CINT_OPERATOR_LIST_ENTRY("*",  Dereference,             CINT_OPERATOR_FLAGS_UNARY | CINT_OPERATOR_F_ACCEPT_POINTER)
    CINT_OPERATOR_LIST_ENTRY("-",  Negative,                CINT_OPERATOR_FLAGS_IUNARY)
    CINT_OPERATOR_LIST_ENTRY("+",  Positive,                CINT_OPERATOR_FLAGS_AUNARY)
    CINT_OPERATOR_LIST_ENTRY("sizeof", Sizeof,              CINT_OPERATOR_FLAGS_UNARY | CINT_OPERATOR_F_ACCEPT_ALL)
    CINT_OPERATOR_LIST_ENTRY(".", Dot,                      CINT_OPERATOR_F_LEFT | CINT_OPERATOR_F_ACCEPT_ALL)
    CINT_OPERATOR_LIST_ENTRY("->", Arrow,                   CINT_OPERATOR_F_LEFT | CINT_OPERATOR_F_ACCEPT_POINTER)
    CINT_OPERATOR_LIST_ENTRY("typecast", Typecast,          CINT_OPERATOR_F_RIGHT | CINT_OPERATOR_F_ACCEPT_ALL)

#undef CINT_OPERATOR_LIST_ENTRY
